package com.jme3.ai.recast;

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
public final class TimerLabel {

    public final static TimerLabel RC_TIMER_TOTAL = new TimerLabel("RC_TIMER_TOTAL");
    public final static TimerLabel RC_TIMER_TEMP = new TimerLabel("RC_TIMER_TEMP");
    public final static TimerLabel RC_TIMER_RASTERIZE_TRIANGLES = new TimerLabel("RC_TIMER_RASTERIZE_TRIANGLES");
    public final static TimerLabel RC_TIMER_BUILD_COMPACTHEIGHTFIELD = new TimerLabel("RC_TIMER_BUILD_COMPACTHEIGHTFIELD");
    public final static TimerLabel RC_TIMER_BUILD_CONTOURS = new TimerLabel("RC_TIMER_BUILD_CONTOURS");
    public final static TimerLabel RC_TIMER_BUILD_CONTOURS_TRACE = new TimerLabel("RC_TIMER_BUILD_CONTOURS_TRACE");
    public final static TimerLabel RC_TIMER_BUILD_CONTOURS_SIMPLIFY = new TimerLabel("RC_TIMER_BUILD_CONTOURS_SIMPLIFY");
    public final static TimerLabel RC_TIMER_FILTER_BORDER = new TimerLabel("RC_TIMER_FILTER_BORDER");
    public final static TimerLabel RC_TIMER_FILTER_WALKABLE = new TimerLabel("RC_TIMER_FILTER_WALKABLE");
    public final static TimerLabel RC_TIMER_MEDIAN_AREA = new TimerLabel("RC_TIMER_MEDIAN_AREA");
    public final static TimerLabel RC_TIMER_FILTER_LOW_OBSTACLES = new TimerLabel("RC_TIMER_FILTER_LOW_OBSTACLES");
    public final static TimerLabel RC_TIMER_BUILD_POLYMESH = new TimerLabel("RC_TIMER_BUILD_POLYMESH");
    public final static TimerLabel RC_TIMER_MERGE_POLYMESH = new TimerLabel("RC_TIMER_MERGE_POLYMESH");
    public final static TimerLabel RC_TIMER_ERODE_AREA = new TimerLabel("RC_TIMER_ERODE_AREA");
    public final static TimerLabel RC_TIMER_MARK_BOX_AREA = new TimerLabel("RC_TIMER_MARK_BOX_AREA");
    public final static TimerLabel RC_TIMER_MARK_CYLINDER_AREA = new TimerLabel("RC_TIMER_MARK_CYLINDER_AREA");
    public final static TimerLabel RC_TIMER_MARK_CONVEXPOLY_AREA = new TimerLabel("RC_TIMER_MARK_CONVEXPOLY_AREA");
    public final static TimerLabel RC_TIMER_BUILD_DISTANCEFIELD = new TimerLabel("RC_TIMER_BUILD_DISTANCEFIELD");
    public final static TimerLabel RC_TIMER_BUILD_DISTANCEFIELD_DIST = new TimerLabel("RC_TIMER_BUILD_DISTANCEFIELD_DIST");
    public final static TimerLabel RC_TIMER_BUILD_DISTANCEFIELD_BLUR = new TimerLabel("RC_TIMER_BUILD_DISTANCEFIELD_BLUR");
    public final static TimerLabel RC_TIMER_BUILD_REGIONS = new TimerLabel("RC_TIMER_BUILD_REGIONS");
    public final static TimerLabel RC_TIMER_BUILD_REGIONS_WATERSHED = new TimerLabel("RC_TIMER_BUILD_REGIONS_WATERSHED");
    public final static TimerLabel RC_TIMER_BUILD_REGIONS_EXPAND = new TimerLabel("RC_TIMER_BUILD_REGIONS_EXPAND");
    public final static TimerLabel RC_TIMER_BUILD_REGIONS_FLOOD = new TimerLabel("RC_TIMER_BUILD_REGIONS_FLOOD");
    public final static TimerLabel RC_TIMER_BUILD_REGIONS_FILTER = new TimerLabel("RC_TIMER_BUILD_REGIONS_FILTER");
    public final static TimerLabel RC_TIMER_BUILD_LAYERS = new TimerLabel("RC_TIMER_BUILD_LAYERS");
    public final static TimerLabel RC_TIMER_BUILD_POLYMESHDETAIL = new TimerLabel("RC_TIMER_BUILD_POLYMESHDETAIL");
    public final static TimerLabel RC_TIMER_MERGE_POLYMESHDETAIL = new TimerLabel("RC_TIMER_MERGE_POLYMESHDETAIL");
    public final static TimerLabel RC_MAX_TIMERS = new TimerLabel("RC_MAX_TIMERS");

    public final int swigValue() {
        return swigValue;
    }

    @Override
    public String toString() {
        return swigName;
    }

    public static TimerLabel swigToEnum(int swigValue) {
        if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue) {
            return swigValues[swigValue];
        }
        for (int i = 0; i < swigValues.length; i++) {
            if (swigValues[i].swigValue == swigValue) {
                return swigValues[i];
            }
        }
        throw new IllegalArgumentException("No enum " + TimerLabel.class + " with value " + swigValue);
    }

    private TimerLabel(String swigName) {
        this.swigName = swigName;
        this.swigValue = swigNext++;
    }

    private TimerLabel(String swigName, int swigValue) {
        this.swigName = swigName;
        this.swigValue = swigValue;
        swigNext = swigValue + 1;
    }

    private TimerLabel(String swigName, TimerLabel swigEnum) {
        this.swigName = swigName;
        this.swigValue = swigEnum.swigValue;
        swigNext = this.swigValue + 1;
    }
    private static TimerLabel[] swigValues = {RC_TIMER_TOTAL, RC_TIMER_TEMP, RC_TIMER_RASTERIZE_TRIANGLES, RC_TIMER_BUILD_COMPACTHEIGHTFIELD, RC_TIMER_BUILD_CONTOURS, RC_TIMER_BUILD_CONTOURS_TRACE, RC_TIMER_BUILD_CONTOURS_SIMPLIFY, RC_TIMER_FILTER_BORDER, RC_TIMER_FILTER_WALKABLE, RC_TIMER_MEDIAN_AREA, RC_TIMER_FILTER_LOW_OBSTACLES, RC_TIMER_BUILD_POLYMESH, RC_TIMER_MERGE_POLYMESH, RC_TIMER_ERODE_AREA, RC_TIMER_MARK_BOX_AREA, RC_TIMER_MARK_CYLINDER_AREA, RC_TIMER_MARK_CONVEXPOLY_AREA, RC_TIMER_BUILD_DISTANCEFIELD, RC_TIMER_BUILD_DISTANCEFIELD_DIST, RC_TIMER_BUILD_DISTANCEFIELD_BLUR, RC_TIMER_BUILD_REGIONS, RC_TIMER_BUILD_REGIONS_WATERSHED, RC_TIMER_BUILD_REGIONS_EXPAND, RC_TIMER_BUILD_REGIONS_FLOOD, RC_TIMER_BUILD_REGIONS_FILTER, RC_TIMER_BUILD_LAYERS, RC_TIMER_BUILD_POLYMESHDETAIL, RC_TIMER_MERGE_POLYMESHDETAIL, RC_MAX_TIMERS};
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
}
